
### 데이터 타입
자바스크립트는 7개의 데이터 타입을 정의한다
- undefined
- null
- Boollean
- String
- Symbol
- Numeric (Number, BigInt)
- Object

데이터 타입은 여러 종류의 데이터를 식별하는 분류 체계로 컴파일러에게 값의 형태를 알려준다.
개발자는 타입을 사용해서 값의 종류를 명시할 수 있고, 메모리를 효율적으로 사용할 수 있다.


자바스크립트에도 타입이 존재한다. 다만 개발자가 컴파일 이전에 정의를 해주지 않았던 것일뿐.
이렇게 타입을 결정하는 시점에 따라 타입을 '정적 타입' 과 '동적타입' 으로 분류한다.

> 컴파일타임 : 기계가 소스코드를 이해할 수 있도록 기계어로 변환되는 시점 
>런타임 : 변환된 파일이 메모리에 적재되어 실행되는 시점

### 강타입 약타입

컴파일러나 엔진 등에 타입이 자동으로 변경되는 것을 '암묵적 타입 변환' 이라고 한다.
이 '암묵적 타입 변환'의 여부에 따라 강타입과 약타입으로 분류한다. 

강타입의 언어는 서로 다른 타입을 갖는 값끼리 연산을 시도하면 컴파일러/인터프리터에서 에러가 발생한다.
약타입은 내부적으로 판단하여 특정값의 타입을 변환하여 연산을 수행해 값을 도출한다 (Ba NaN a)

### 컴파일 방식
컴파일이란 사람의 코드를 기계어로 바꿔주는 과정이다. (high-level lang -> binary lang) 
타입스크립트는 다른 언어와는 달리 컴파일 결과물이 자바스크립트 파일이다.
왜냐면 TS 의 존재 이유는 사람이 이해하기 쉬운 방식으로 코드를 작성하는 것이 아닌, 
자바스크립트의 컴파일타임에 '런타임 에러'를 사전에 잡아내기 위함이다.

TS 는 이처럼 다른 언어와는 달리 JS에 레이어를 끼얹어 '템플릿 언어',  '확장 언어'라고 불리기도 한다.



# 타입 시스템

### 타입 애너테이션 방식
변수나 상수,함수에 타입을 명시적으로 선언하여 어떤 타입이 저장될지 컴파일러에 알려주는 문법 
사용법 : 변수 이름 뒤에 : type 으로 명시한다.
`let isDone : boolean = false;`


### 구조적 타이핑 
다른 언어에서는 타입은 이름으로 구분되며 컴파일타임 이후에도 남아있게 된다.
서로 다른 클래스끼리 명확한 상속 관계나 공통 인터페이스가  없다면 타입은 호환되지 않는다. 
이를 '구체화한 타입 시스템' 이라고 부른다. 

타입스크립트는 이름으로 타입을 구분하지 않고 구조로 타입을 구분한다. 
이를 '구조적 타이핑'이라고 한다.

### 구조적 서브타이핑
타입스크립트는 집합으로 나타낼 수 있는 시스템을 갖고 있다. 
객체가 가지고 있는 속성을 바탕으로 타입을 구분한다. 
이름이 다르더라도 속성이 동일하다면  호환이 가능한 타입이다. 

```ts
class Person{
  name : string
}
class Man{
  name : string ...
}
const greet = (person:Person)=>{
  console.log(person.name)
}
greet(new Man('JASON'))
```


자바스크립트는 '덕 타이핑'을 기반으로 한다. 매개변수값이 올바르게 주어진다면, 그 값이 어떻게 만들었는지 신경안 쓴다는 개념이다. 
타입스크립트는 특징을 받아들여 객체의 구조적 특징을 기반으로 타이핑하는 방식을 택했다. 

덕 타이핑과 구조적 타이핑의 차이는 타입을 검사하는 시점이다. 
덕 타이핑은 런타임에 타입을 검사한다. 
구조적 타이핑은 컴파일타임에 타임을 체크한다. 


### 점진적 타입 확인
점진적 타입 검사란 컴파일 타임에 타입을 검사하면서 필요에 따라 '타입 선언 생략을 허용'하는 방식이다. 
이렇게 추론된 타입은 모두 any로 추론된다. 


enum 과 클래스는 값과 타입 공간 모두 포함될 수 있다.
enum을 뜯어보면 이렇게 생겼다
```ts
enum Direction  {
  UP,DOWN,LEFT,RIGHT
}
function Direction(Direction){
  Direction[Direction["UP"] = 0] = "UP",
  ...
}
```



### 타입 확인하는 법
typeof , instanceof 를 사용해서 확인한다.

타입스크립트에서 typeof 는 값에서 쓰일때와 타입에서 쓰일 때의 역할이 다르다.

```ts
const person = new Person()
function email(){}

const v1 = typeof person // 'object'
const v2 = typeof email // 'function'

type v3 = typeof person // Person
type v4 = typeof email // ()=>void

```

Instanceof 를 사용하면 프로토타입 체이닝 어딘가에 생성자의 프로토타입 속성이 존재하는지 판단할 수 있다. 

```js
let error = unknown

if (error instanceof Error){
  showAlertModal(error.message)
} else throw Error(error)
```


> String, Object 등 파스칼 표기법으로 적힌 값들은 내장 원시 타입을 포함하는 객체이다. 


### 중괄호 ({ })
중괄호는 객체 리터럴 방식으로 객체를 생성할 때 사용한다. 
빈 객체 타입을 지정하기 위해서는 유틸리티 타입으로 `Record<string,never>` 처럼 사용하는게 바람직하다.


>type 과 interface 중 어떤걸 선호하나요? (인터뷰)
- 필요에 따라 다르지만 선언 병합이 필요할 경우 interface 를 사용하고, 
- coputed value 를 사용해야 한다면 type
- IDE 에서 type은 리러털한 타입 추론이 나오더라 
- 상속이 필요할 경우 Interface 사용
- 유니온/ 교차 타입 등 type 에서만 지원하는 기능 
